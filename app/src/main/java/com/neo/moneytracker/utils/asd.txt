@get:Rule
val composeTestRule = createComposeRule()

@Test
fun userScreen_displaysUser() {
    composeTestRule.setContent {
        UserScreen(user = User(1, "John"))
    }

    composeTestRule.onNodeWithText("John").assertIsDisplayed()
}

i want to do this in compose screen

package com.neo.moneytracker.ui.screens

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavController
import androidx.navigation.compose.currentBackStackEntryAsState
import com.neo.moneytracker.R
import com.neo.moneytracker.ui.components.AmountInputDialog
import com.neo.moneytracker.ui.components.SimpleTabLayoutforAdd
import com.neo.moneytracker.ui.navigation.Screens
import com.neo.moneytracker.ui.navigation.SealedBottomNavItem
import com.neo.moneytracker.ui.theme.IconBackGroundColor
import com.neo.moneytracker.ui.theme.LemonSecondary
import com.neo.moneytracker.ui.viewmodel.AccountsViewModel
import com.neo.moneytracker.ui.viewmodel.AddViewModel
import com.neo.moneytracker.ui.viewmodel.TransactionViewModel
import com.neo.moneytracker.ui.viewmodel.UiStateViewModel

@Composable
fun AddScreen(
    navController: NavController,
    uiStateViewModel: UiStateViewModel,
    transactionViewModel: TransactionViewModel,
    accountViewModel: AccountsViewModel,
    transactionId: Int? = null,
    isEdit: Boolean = false
) {
    val viewModel: AddViewModel = hiltViewModel()
    //    val context = LocalContext.current
    val categoryMap by viewModel.categoryMap
//    val categoryMap = remember { ReaderHelper.loadFullCategoryMap(context) }
    val categories = categoryMap.keys.toList()

    var selectedTabIndex by remember { mutableStateOf(0) }
    val selectedCategory = categories.getOrNull(selectedTabIndex) ?: return

    var selectedItem by remember { mutableStateOf<String?>(null) }
    var selectedIcon by remember { mutableStateOf<Int?>(null) }
    val dialogVisible by uiStateViewModel.isDialogVisible.collectAsState()

    val transactions = transactionViewModel.transactions.collectAsState().value
    val transactionToEdit = remember(transactionId, transactions) {
        transactionId?.let { id -> transactions.find { it.id == id } }
    }

    LaunchedEffect(transactionId, transactionViewModel.transactions.collectAsState().value) {
        println("Transactions available: ${transactionViewModel.transactions.value}")
        println("Looking for ID: $transactionId")
    }

    LaunchedEffect(transactionToEdit, isEdit) {
        if (isEdit) {
            transactionToEdit?.let { tx ->
                selectedTabIndex = categories.indexOf(tx.category).takeIf { it >= 0 } ?: 0
                selectedItem = tx.category
                selectedIcon = tx.iconRes
                uiStateViewModel.setDialogVisible(true)
            }
        }
    }


    Scaffold(
        topBar = {
            Column(
                modifier = Modifier
                    .background(LemonSecondary)
                    .padding(horizontal = 8.dp, vertical = 8.dp)
            ) {
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    TextButton(
                        onClick = { navController.popBackStack() },
                        modifier = Modifier.padding(start = 4.dp)
                    ) {
                        Text("Cancel", color = Color.Black)
                    }

                    Spacer(modifier = Modifier.weight(1f))

                    Text(
                        text = "Add",
                        color = Color.Black,
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold
                    )

                    Spacer(modifier = Modifier.weight(1f))

                    Image(
                        painter = painterResource(id = R.drawable.checklist),
                        contentDescription = "Settings Icon",
                        modifier = Modifier
                            .size(30.dp)
                            .padding(end = 8.dp)
                    )
                }

                SimpleTabLayoutforAdd(
                    tabs = categories,
                    selectedIndex = selectedTabIndex,
                    onTabSelected = {
                        selectedTabIndex = it
                        selectedItem = null // Reset on tab change
                    },
                    modifier = Modifier
                        .height(40.dp)
                        .background(color = LemonSecondary)
                        .padding(horizontal = 16.dp, vertical = 2.dp)
                        .clip(RoundedCornerShape(12.dp))
                        .border(1.dp, Color.Black, RoundedCornerShape(12.dp))
                )

                Spacer(modifier = Modifier.height(6.dp))
            }
        },
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .fillMaxSize()
                .background(Color.White)
        ) {
            val subWithIcons = categoryMap[selectedCategory] ?: emptyList()

            Column(modifier = Modifier.weight(1f)) {
                SubcategoryGridScreen(
                    subWithIcons = subWithIcons,
                    selectedItem = selectedItem
                ) { clickedItem, iconRes ->
                    if (clickedItem == "Settings") {
                        navController.navigate(Screens.settings.route)
                    } else {
                        selectedItem = clickedItem
                        selectedIcon = iconRes

                        uiStateViewModel.setDialogVisible(true)
                    }
                }
            }

            if (dialogVisible && selectedItem != null && selectedItem != "Settings") {
                AmountInputDialog(
                    iconRes = selectedIcon!!,
                    selectedCategory = selectedCategory,
                    selectedSubCategory = selectedItem!!,
                    transactionViewModel = transactionViewModel,
                    onTransactionAdded = { newTransaction ->
                        if (isEdit && transactionToEdit != null) {
                            val updated = newTransaction.copy(id = transactionToEdit!!.id)
                            transactionViewModel.updateTransaction(updated)
                        } else {
                            transactionViewModel.addTransaction(newTransaction)
                        }
                    },
                    onDismiss = {
                        uiStateViewModel.setDialogVisible(false)
                        selectedItem = null
                        navController.popBackStack(
                            SealedBottomNavItem.records.route,
                            inclusive = false
                        )
                    },
                    accountViewModel = accountViewModel,
                    initialAmount = transactionToEdit?.amount.orEmpty(),
                    initialDate = transactionToEdit?.date ?: "",
                    initialNote = transactionToEdit?.note ?: ""
                )
            }
        }
    }
}

@Composable
fun SubcategoryGridScreen(
    subWithIcons: List<Pair<String, Int>>,
    selectedItem: String?,
    onSubcategoryClick: (String, Int) -> Unit
) {
    LazyVerticalGrid(
        columns = GridCells.Fixed(4),
        contentPadding = PaddingValues(8.dp),
        horizontalArrangement = Arrangement.spacedBy(8.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp),
        modifier = Modifier.fillMaxWidth()
    ) {
        items(subWithIcons) { (name, iconRes) ->
            val isSelected = selectedItem == name
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                modifier = Modifier
                    .padding(4.dp)
                    .clickable { onSubcategoryClick(name, iconRes) }
            ) {
                Box(
                    modifier = Modifier
                        .size(56.dp)
                        .background(
                            color = if (isSelected) LemonSecondary else IconBackGroundColor,
                            shape = CircleShape
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    Image(
                        painter = painterResource(id = iconRes),
                        contentDescription = name,
                        modifier = Modifier.size(28.dp)
                    )
                }

                Text(
                    text = name,
                    textAlign = TextAlign.Center,
                    style = MaterialTheme.typography.labelSmall,
                    modifier = Modifier.padding(top = 4.dp)
                )
            }
        }
    }
}
